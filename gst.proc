var input_radio_selector, input_text_selector, results = [],
    // update here if it's stop working
    gst_lookup_label = '#cl_b-l',
    gst_no_radio = '#e-4',
    gst_no_input = '#e-6',
    reg_no_radio = '#e-7',
    reg_no_input = '#e-8',
    reg_name_radio = '#e-9',
    reg_name_input = '#e-a',
    table_result = '#e-h',
    error_1 = '#e-m',
    error_2 = '#e-r',
    error_3 = '#e-u',
    casper = require('casper').create({
      verbose: true,
      logLevel: 'error',
      waitTimeout: 1000,
      pageSettings: {
        loadImages: false,
        loadPlugins: false,
        userAgent: 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.2 Safari/537.36'
      }
    })
    ;

if (casper.cli.args.length === 0) {
    casper.echo('No arguments passed').exit();
}

switch(casper.cli.get(0))
{
  case 'gst_no':
    input_radio_selector = gst_no_radio;
    input_text_selector = gst_no_input;
    break;
  case 'reg_no':
    input_radio_selector = reg_no_radio;
    input_text_selector = reg_no_input;
    break;
  case 'name':
  default:
    input_radio_selector = reg_name_radio;
    input_text_selector = reg_name_input;
    break;
}

function padDigits(number, digits) {
    return Array(Math.max(digits - String(number).length + 1, 0)).join(0) + number;
}

casper.start('https://gst.customs.gov.my/TAP/_/#1') 
  
  // click Lookup GST Status label
  .waitForSelector(gst_lookup_label, function() {
    this.click(gst_lookup_label)
  })
    
  // choose radio category and keyin input
  .waitForSelector(input_radio_selector, function() {
    this.click(input_radio_selector)
    this.sendKeys(input_text_selector, 
      // casper cli convert the gst_no to int removing zero prefix, so we append back the zeros assuming gst_no has 12 digits
      typeof casper.cli.get(1) === 'number' ? padDigits(casper.cli.get(1), 12) : casper.cli.get(1))
      .sendKeys(input_text_selector, this.page.event.key.Enter , {keepFocus: true});
  })
      
  // get results
  .waitUntilVisible(table_result, function() {

    results = this.evaluate(function(table_result) {
      
      var rows = document.querySelectorAll(table_result+' tbody tr.DataRow');
      return Array.prototype.map.call(rows, function(row) {

        var cells = row.querySelectorAll('td');
          return {
            gst_no: cells[0].innerText.trim(),
            taxpayer_name: cells[1].innerText.trim(),
            trading_name: cells[2].innerText.trim(),
            commence_date: cells[3].innerText.trim(),
            status: cells[4].innerText.trim()
          };
        });
      }, table_result);
      //require('utils').dump(results);
      this.echo(JSON.stringify({results: results}));

    // on failed results
    }, function() {
        
      this.waitUntilVisible(error_1, function() {
        this.echo(JSON.stringify({
          error: this.evaluate(function(error_1) {
            return document.querySelector(error_1).innerText.trim()
          }, error_1)
        }));

      // other error
      }, function() {

        this.waitUntilVisible(error_2, function() {
          this.echo(JSON.stringify({
            error: this.evaluate(function(error_2) {
              return document.querySelector(error_2).innerText.trim()
            }, error_2)
          }));

        // another error
        }, function() {

          this.waitUntilVisible(error_3, function() {
            this.echo(JSON.stringify({
              error: this.evaluate(function(error_3) {
                return document.querySelector(error_3).innerText.trim()
              }, error_3)
            }));
          });
        });
      });
  });

/* debug */

casper.on('error', function(msg,backtrace) {
  this.echo("=========================");
  this.echo("ERROR:");
  this.echo(msg);
  this.echo(backtrace);
  this.echo("=========================");
});
 
casper.on("page.error", function(msg, backtrace) {
  this.echo("=========================");
  this.echo("PAGE.ERROR:");
  this.echo(msg);
  this.echo(backtrace);
  this.echo("=========================");
});

casper.on("resource.error", function(resourceError){
  console.log('Unable to load resource (#' + resourceError.id + 'URL:' + resourceError.url + ')');
  console.log('Error code: ' + resourceError.errorCode + '. Description: ' + resourceError.errorString);
});

/* end debug */

casper.run(function() {
  this.exit();
});